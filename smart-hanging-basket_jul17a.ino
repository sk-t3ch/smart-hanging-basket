#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "smart-hanging-basket"
  https://create.arduino.cc/cloud/things/155c38ff-e4b8-42a7-bbc4-5ad894b6b5bf 

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing properties

  float illuminance;
  float pressure;
  float uvB;
  int green;
  float temperature;
  float humidity;
  bool water;
  int blue;
  bool floodlight;
  int uvIndex;
  float uvA;
  int red;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include <Arduino_MKRENV.h>
#include "thingProperties.h"

int WATER_RELAY_PIN = 1;
int FLOODLIGHT_RELAY_PIN = 2;
int GREEN_PIN = 3;
int BLUE_PIN = 4;
int RED_PIN = 5;


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  if (!ENV.begin()) {
    Serial.println("Failed to initialize MKR ENV shield!");
    while (1);
  }
  pinMode(WATER_RELAY_PIN, OUTPUT);
  pinMode(FLOODLIGHT_RELAY_PIN, OUTPUT);
  pinMode(RED_PIN, OUTPUT);
  pinMode(GREEN_PIN, OUTPUT);
  pinMode(BLUE_PIN, OUTPUT);

  
  temperature = ENV.readTemperature();
  illuminance = ENV.readIlluminance();
  humidity = ENV.readHumidity();
  pressure = ENV.readPressure();
  uvIndex = ENV.readUVIndex();
  uvA = ENV.readUVA();
  uvB = ENV.readUVB();
  water = false;
  floodlight = false;
  red = 0;
  green = 0;
  blue = 0;
}

void loop() {
  ArduinoCloud.update();

  temperature = ENV.readTemperature();
  illuminance = ENV.readIlluminance();
  humidity = ENV.readHumidity();
  pressure = ENV.readPressure();
  uvA = ENV.readUVA();
  uvB = ENV.readUVB();
  uvIndex = int(ENV.readUVIndex());
  

  delay(500);
}


void onFloodlightChange() {
  Serial.print("changing floodlight to: ");
  Serial.println(floodlight);
  digitalWrite(FLOODLIGHT_RELAY_PIN, floodlight);
}

void writeNewColour(){
  analogWrite(RED_PIN, red);
  analogWrite(GREEN_PIN, green);
  analogWrite(BLUE_PIN, blue);
  Serial.print("Setting new colour value (RGB): ");
  Serial.print(red);
  Serial.print(",  ");
  Serial.print(green);
  Serial.print(",  ");
  Serial.println(blue);
}

void onWaterChange() {
  Serial.print("changing water to: ");
  Serial.println(water);
  digitalWrite(WATER_RELAY_PIN, water);
  if(water){
    red = 255;
    blue = 0;
    green = 0;
    writeNewColour();
  }
  else{
    red = 0;
    blue = 255;
    green = 0;
    writeNewColour();
  }
}


void onRedChange() {
  writeNewColour();
}


void onGreenChange() {
  writeNewColour();
}


void onBlueChange() {
  writeNewColour();
}







